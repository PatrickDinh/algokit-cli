name: Build, Test and Publish Pyinstaller Binaries

on:
  workflow_call:
    inputs:
      production_release:
        required: true
        type: string
      python_version:
        required: true
        type: string

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-14]
        include:
          - os: macos-latest
            build_command: "poetry run poe package_unix"
          - os: macos-14
            build_command: "poetry run poe package_unix"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.production_release == 'true' && '0' || '1' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - name: Setup poetry cache
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}-${{ runner.os }}-${{ runner.arch }}-${{ inputs.python_version }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install the Apple certificate and provisioning profile
        if: ${{ startsWith(matrix.os, 'macos') }} == 'macos'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build & test binary
        uses: ./.github/actions/build-binaries
        with:
          python_version: ${{ inputs.python_version }}
          package_name: "algokit"
          production_release: ${{ inputs.production_release }}
          operating_system: ${{ runner.os }}
          architecture: ${{ runner.arch }}
          build_command: ${{ matrix.build_command }}
