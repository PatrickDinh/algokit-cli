name: "Setup, Build, and Test Pyinstaller Binaries"
description: "Build, test and upload binaries to GitHub releases and/or artifacts (ensure poetry dependencies are installed before running this action)"
inputs:
  package_name:
    description: "The name of the package to build and test"
    required: true
  production_release:
    description: "Flag to determine if this is a production release"
    required: true
  operating_system:
    description: "Operating system to set the correct binary path and extension"
    required: true
  architecture:
    description: "Architecture to set the correct binary path and extension"
    required: true
  build_command:
    description: "Command to build the binaries"
    required: true
  python_version:
    description: "Python version to use"
    required: true

runs:
  using: "composite"
  steps:
    - name: Build Executable
      run: ${{ inputs.build_command }}
      shell: bash

    - name: Set TEST_CLI_PATH
      run: |
        TEST_CLI_PATH="${{ github.workspace }}/dist/${{ inputs.package_name }}/${{ inputs.package_name }}"
        if [ "${{ inputs.operating_system }}" == "Windows" ]; then
          TEST_CLI_PATH="${{ github.workspace }}\dist\${{ inputs.package_name }}\${{ inputs.package_name }}.exe"
        fi
        echo "TEST_CLI_PATH=$TEST_CLI_PATH" >> $GITHUB_ENV
      shell: bash

    - name: Run portability tests
      run: |
        echo "Executing: ${{ env.TEST_CLI_PATH }}"
        git config --global user.email "actions@github.com" && git config --global user.name "github-actions" 
        poetry run pytest tests/ -m pyinstaller_binary_tests --cli_path "${{ env.TEST_CLI_PATH }}" --log-cli-level=INFO
      shell: ${{ inputs.operating_system == 'Windows' && 'cmd' || 'bash' }}

    - name: Set release version
      shell: bash
      continue-on-error: true
      if: ${{ inputs.production_release == 'true' }}
      run: |
        echo "RELEASE_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV
        git describe --tags $(git rev-list --tags --max-count=1)

    - name: Zip binaries
      shell: bash
      run: |
        ls -l dist
        cd dist/algokit/
        if [ "${{ inputs.production_release }}" == "true" ]; then
          tar -zcvf ../../algokit-${{ env.RELEASE_VERSION }}-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}.zip *
        else
          tar -zcvf ../../algokit-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}.zip *
        fi
        cd ../..
        ls -l

    # TODO refactor this, it won't work on Windows and Linux
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

    - name: Upload binary as artifact (release)
      if: ${{ inputs.production_release == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: algokit-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}
        path: algokit-${{ env.RELEASE_VERSION }}-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}.zip

    - name: Upload binary as artifact (dev)
      if: ${{ inputs.production_release != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: algokit-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}
        path: algokit-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}.zip

    - name: Append binary to release
      continue-on-error: true
      if: ${{ inputs.production_release == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          algokit-${{ env.RELEASE_VERSION }}-${{ inputs.operating_system }}-${{ inputs.architecture }}-py${{ inputs.python_version }}.zip
        tag_name: ${{ env.RELEASE_VERSION }}
        prerelease: ${{ contains(env.RELEASE_VERSION, 'beta') }}
